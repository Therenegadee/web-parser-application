openapi: 3.0.0
info:
  title: Data Harvest Parser
  version: 0.0.1
servers:
  - url: http://localhost:8080/api
    description: Development Server

paths:
  /user/{id}:
    get:
      summary: User Info
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
      operationId: showUserInfo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          $ref: "#/components/responses/UnauthorizedError"

  /auth/signup:
    post:
      summary: Register
      tags:
        - Authorization
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: User registered successfully and waits for email verification!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        '400':
          description: Account with such email is already in use!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        '409':
          description: Account with such username is already in use!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

  /auth/signin:
    post:
      summary: Login
      tags:
        - Authorization
      operationId: authenticateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully Logged In
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        '400':
          description: Authentication error! Incorrect login/password input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

  /auth/activation:
    patch:
      summary: Activation User account via Email
      tags:
        - Authorization
      operationId: activateUser
      parameters:
        - in: query
          name: id
          schema:
            type: string
          required: true
          description: The User crypto ID
      responses:
        '200':
          description: Account was confirmed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        '400':
          description: Account is already confirmed!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        '404':
          description: The link isn't valid. User with such user id not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

  /parser/settings:
    post:
      security:
        - bearerAuth: [ ]
      summary: Set Settings for Parsing
      tags:
        - Parser
      operationId: setParserSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserParserSettings"
      responses:
        '201':
          description: Settings were Successfully Set
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"

  /parser/history:
    get:
      security:
        - bearerAuth: [ ]
      summary: Return List of User Parser Queries History
      tags:
        - Parser
      operationId: getAllParserQueries
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParserResult'
        '401':
          $ref: "#/components/responses/UnauthorizedError"


  /parser/{id}:
    get:
      security:
        - bearerAuth: [ ]
      summary: Return Parser Settings and It's Result File
      tags:
        - Parser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          description: Parser Settings ID
      operationId: showParserSettings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParserResult"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    post:
      security:
        - bearerAuth: [ ]
      summary: Start Parsing with Preset Settings with {id}
      tags:
        - Parser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          description: Parser Settings ID
      operationId: runParser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

  schemas:
    MessageResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string

    User:
      type: object
      required:
        - username
        - email
        - userStatus
      properties:
        username:
          type: string
        email:
          type: string
        userStatus:
          type: object
          $ref: "#/components/schemas/UserStatus"
        userParseSettings:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/ParserResult"

    UserStatus:
      type: string
      enum:
        - CONFIRMED_ACCOUNT
        - WAIT_FOR_EMAIL_VERIFICATION

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    SignupRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string

    JwtResponse:
      type: object
      required:
        - accessToken
        - id
        - username
        - email
        - roles
      properties:
        accessToken:
          type: string
          pattern: ^Bearer\s.+$
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            type: string

    ParserResult:
      type: object
      required:
        - id
        - userParserSettings
        - linkToDownloadResults
      properties:
        id:
          type: integer
          format: int64
        userParserSettings:
          type: object
          $ref: "#/components/schemas/UserParserSettings"
        linkToDownloadResults:
          type: string

    UserParserSettings:
      type: object
      required:
        - firstPageUrl
        - numOfPagesToParse
        - className
        - tagName
        - cssSelectorNextPage
        - header
        - parseSettingElements
        - outputFileType
      properties:
        firstPageUrl:
          type: string
        numOfPagesToParse:
          type: integer
          format: int32
        className:
          type: string
        tagName:
          type: string
        cssSelectorNextPage:
          type: string
        header:
          type: array
          items:
            type: string
        parseSettingElements:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/ElementLocator"
        outputFileType:
          type: object
          $ref: "#/components/schemas/OutputFileType"


    ElementLocator:
      type: object
      required:
        - elementType
        - pathToLocator
      properties:
        id:
          type: integer
          format: int64
        elementType:
          type: object
          $ref: "#/components/schemas/ElementType"
        pathToLocator:
          type: string
        extraPointer:
          type: string

    OutputFileType:
      type: string
      enum:
        - XLSX
        - CSV

    ElementType:
      type: string
      enum:
        - XPATH
        - TAG_ATTR
        - CSS